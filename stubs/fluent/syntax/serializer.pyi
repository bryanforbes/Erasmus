from typing import Any, ClassVar
from typing_extensions import TypeGuard

from .ast import (
    Attribute,
    CallArguments,
    Comment,
    Expression,
    GroupComment,
    Identifier,
    Junk,
    Message,
    NamedArgument,
    NumberLiteral,
    Pattern,
    Placeable,
    Resource,
    ResourceComment,
    SelectExpression,
    Term,
)

def indent_except_first_line(content: str) -> str: ...
def includes_new_line(elem: Any) -> bool: ...
def is_select_expr(elem: Any) -> TypeGuard[Placeable]: ...
def should_start_on_new_line(pattern: Any) -> bool: ...

class FluentSerializer:
    HAS_ENTRIES: ClassVar[int] = ...
    def __init__(self, with_junk: bool = ...) -> None: ...
    def serialize(self, resource: Resource) -> str: ...
    def serialize_entry(
        self,
        entry: Message | Term | Comment | GroupComment | ResourceComment | Junk,
        state: int = ...,
    ) -> str: ...

def serialize_comment(
    comment: Comment | GroupComment | ResourceComment, prefix: str = ...
) -> str: ...
def serialize_junk(junk: Junk) -> str: ...
def serialize_message(message: Message) -> str: ...
def serialize_term(term: Term) -> str: ...
def serialize_attribute(attribute: Attribute) -> str: ...
def serialize_pattern(pattern: Pattern) -> str: ...
def serialize_element(element: Any) -> str: ...
def serialize_placeable(
    placeable: Placeable | SelectExpression | Expression,
) -> str | None: ...
def serialize_expression(expression: Expression) -> str | None: ...
def serialize_variant(variant: Identifier | NumberLiteral) -> str: ...
def serialize_call_arguments(expr: CallArguments) -> str: ...
def serialize_named_argument(arg: NamedArgument) -> str: ...
def serialize_variant_key(key: Identifier | NumberLiteral) -> str: ...
