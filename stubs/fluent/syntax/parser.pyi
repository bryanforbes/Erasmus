from collections.abc import Callable, Iterable
from typing import Any, TypeVar

from . import ast as _ast
from .stream import FluentParserStream

_F = TypeVar('_F', bound=Callable[..., Any])

def with_span(fn: _F) -> _F: ...

class FluentParser:
    def __init__(self, with_spans: bool = ...) -> None: ...
    def parse(self, source: str) -> _ast.Resource: ...
    def parse_entry(self, source: str) -> _ast.Entry | _ast.Junk: ...
    def get_entry_or_junk(self, ps: FluentParserStream) -> _ast.Entry | _ast.Junk: ...
    def get_entry(self, ps: FluentParserStream) -> _ast.Entry: ...
    @with_span
    def get_comment(
        self, ps: FluentParserStream
    ) -> _ast.Comment | _ast.GroupComment | _ast.ResourceComment: ...
    @with_span
    def get_message(self, ps: FluentParserStream) -> _ast.Message: ...
    @with_span
    def get_term(self, ps: FluentParserStream) -> _ast.Term: ...
    @with_span
    def get_attribute(self, ps: FluentParserStream) -> _ast.Attribute: ...
    def get_attributes(self, ps: FluentParserStream) -> list[_ast.Attribute]: ...
    @with_span
    def get_identifier(self, ps: FluentParserStream) -> _ast.Identifier: ...
    def get_variant_key(
        self, ps: FluentParserStream
    ) -> _ast.NumberLiteral | _ast.Identifier: ...
    @with_span
    def get_variant(
        self, ps: FluentParserStream, has_default: bool
    ) -> _ast.Variant: ...
    def get_variants(self, ps: FluentParserStream) -> list[_ast.Variant]: ...
    def get_digits(self, ps: FluentParserStream) -> str: ...
    @with_span
    def get_number(self, ps: FluentParserStream) -> _ast.NumberLiteral: ...
    def maybe_get_pattern(self, ps: FluentParserStream) -> _ast.Pattern | None: ...
    @with_span
    def get_pattern(self, ps: FluentParserStream, is_block: bool) -> _ast.Pattern: ...

    class Indent(_ast.SyntaxNode):
        value: str
        def __init__(self, value: str, start: int, end: int) -> None: ...

    def dedent(self, elements: Iterable[Any], common_indent: int) -> list[Any]: ...
    @with_span
    def get_text_element(self, ps: FluentParserStream) -> _ast.TextElement: ...
    def get_escape_sequence(self, ps: FluentParserStream) -> str: ...
    def get_unicode_escape_sequence(
        self, ps: FluentParserStream, u: str, digits: int
    ) -> str: ...
    @with_span
    def get_placeable(self, ps: FluentParserStream) -> _ast.Placeable: ...
    @with_span
    def get_expression(self, ps: FluentParserStream) -> _ast.Expression: ...
    @with_span
    def get_inline_expression(self, ps: FluentParserStream) -> _ast.Expression: ...
    @with_span
    def get_call_argument(
        self, ps: FluentParserStream
    ) -> _ast.Expression | _ast.NamedArgument: ...
    @with_span
    def get_call_arguments(self, ps: FluentParserStream) -> _ast.CallArguments: ...
    @with_span
    def get_string(self, ps: FluentParserStream) -> _ast.StringLiteral: ...
    @with_span
    def get_literal(
        self, ps: FluentParserStream
    ) -> _ast.NumberLiteral | _ast.StringLiteral: ...
