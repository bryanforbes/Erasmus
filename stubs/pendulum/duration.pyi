from datetime import timedelta
from typing import overload
from typing_extensions import Self

class Duration(timedelta):
    def __new__(
        cls,
        days: float = ...,
        seconds: float = ...,
        microseconds: float = ...,
        milliseconds: float = ...,
        minutes: float = ...,
        hours: float = ...,
        weeks: float = ...,
        years: int = ...,
        months: int = ...,
    ) -> Self: ...
    def total_minutes(self) -> int: ...
    def total_hours(self) -> int: ...
    def total_days(self) -> int: ...
    def total_weeks(self) -> int: ...
    def total_seconds(self) -> float: ...
    @property
    def years(self) -> int: ...
    @property
    def months(self) -> int: ...
    @property
    def weeks(self) -> int: ...
    @property
    def days(self) -> int: ...
    @property
    def remaining_days(self) -> int: ...
    @property
    def hours(self) -> int: ...
    @property
    def minutes(self) -> int: ...
    @property
    def seconds(self) -> int: ...
    @property
    def remaining_seconds(self) -> int: ...
    @property
    def microseconds(self) -> int: ...
    @property
    def invert(self) -> bool: ...
    def in_weeks(self) -> int: ...
    def in_days(self) -> int: ...
    def in_hours(self) -> int: ...
    def in_minutes(self) -> int: ...
    def in_seconds(self) -> int: ...
    def in_words(self, locale: str | None = ..., separator: str = ...) -> str: ...
    def as_timedelta(self) -> timedelta: ...
    def __add__(self, other: timedelta) -> Self: ...
    def __radd__(self, other: timedelta) -> Self: ...
    def __sub__(self, other: timedelta) -> Self: ...
    def __neg__(self) -> Self: ...
    def __mul__(self, other: float) -> Self: ...
    def __rmul__(self, other: float) -> Self: ...
    @overload
    def __floordiv__(self, other: timedelta) -> int: ...
    @overload
    def __floordiv__(self, other: int) -> Self: ...
    @overload
    def __truediv__(self, other: timedelta) -> float: ...
    @overload
    def __truediv__(self, other: float) -> Self: ...
    @overload
    def __div__(self, other: timedelta) -> int: ...
    @overload
    def __div__(self, other: int) -> Self: ...
    def __mod__(self, other: timedelta) -> Self: ...
    def __divmod__(self, other: timedelta) -> tuple[int, Self]: ...

class AbsoluteDuration(Duration):
    def __new__(
        cls,
        days: int = ...,
        seconds: int = ...,
        microseconds: int = ...,
        milliseconds: int = ...,
        minutes: int = ...,
        hours: int = ...,
        weeks: int = ...,
        years: int = ...,
        months: int = ...,
    ) -> Self: ...
    def total_seconds(self) -> float: ...
    @property
    def invert(self) -> bool: ...
