from datetime import time, timedelta, tzinfo
from typing import Literal, overload
from typing_extensions import Self

from .duration import AbsoluteDuration, Duration
from .mixins.default import FormattableMixin

class Time(FormattableMixin, time):
    def closest(self, dt1: time, dt2: time) -> Self: ...
    def farthest(self, dt1: time, dt2: time) -> Self: ...
    def add(
        self,
        hours: int = ...,
        minutes: int = ...,
        seconds: int = ...,
        microseconds: int = ...,
    ) -> Time: ...
    def subtract(
        self,
        hours: int = ...,
        minutes: int = ...,
        seconds: int = ...,
        microseconds: int = ...,
    ) -> Time: ...
    def add_timedelta(self, delta: timedelta) -> Time: ...
    def subtract_timedelta(self, delta: timedelta) -> Time: ...
    def __add__(self, other: timedelta) -> Time: ...
    @overload
    def __sub__(self, other: timedelta) -> Time: ...
    @overload
    def __sub__(self, other: time) -> Duration: ...
    def __rsub__(self, other: time) -> AbsoluteDuration: ...
    @overload
    def diff(self, dt: time | None, abs: Literal[False]) -> Duration: ...
    @overload
    def diff(self, dt: time | None = ..., *, abs: Literal[False]) -> Duration: ...
    @overload
    def diff(
        self, dt: time | None = ..., abs: Literal[True] = ...
    ) -> AbsoluteDuration: ...
    @overload
    def diff(self, dt: time | None, abs: bool) -> AbsoluteDuration | Duration: ...
    @overload
    def diff(
        self, dt: time | None = ..., *, abs: bool
    ) -> AbsoluteDuration | Duration: ...
    def diff_for_humans(
        self, other: time | None = ..., absolute: bool = ..., locale: str | None = ...
    ) -> str: ...
    def replace(
        self,
        hour: int | None = ...,
        minute: int | None = ...,
        second: int | None = ...,
        microsecond: int | None = ...,
        tzinfo: bool = ...,
    ) -> Self: ...
    def __getnewargs__(self) -> tuple[Self]: ...
    def __reduce__(
        self,
    ) -> tuple[type[Self], tuple[int, int, int, int, tzinfo | None]]: ...
    def __reduce_ex__(
        self, protocol: int
    ) -> tuple[type[Self], tuple[int, int, int, int, tzinfo | None]]: ...
