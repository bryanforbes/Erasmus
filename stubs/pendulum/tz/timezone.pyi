from _typeshed import StrOrBytesPath
from datetime import datetime as _datetime, timedelta, tzinfo
from typing import Final, Literal, overload
from typing_extensions import TypeVar

POST_TRANSITION: Final[Literal['post']]
PRE_TRANSITION: Final[Literal['pre']]
TRANSITION_ERROR: Final[Literal['error']]
_D = TypeVar('_D', bound=_datetime, infer_variance=True)

class Timezone(tzinfo):
    def __init__(self, name: str, extended: bool = ...) -> None: ...
    @property
    def name(self) -> str: ...
    def convert(
        self, dt: _D, dst_rule: Literal['post', 'pre', 'error'] | None = ...
    ) -> _D: ...
    def datetime(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = ...,
        minute: int = ...,
        second: int = ...,
        microsecond: int = ...,
    ) -> _datetime: ...
    @overload
    def utcoffset(self, dt: None) -> None: ...
    @overload
    def utcoffset(self, dt: _datetime) -> timedelta: ...
    @overload
    def dst(self, dt: None) -> None: ...
    @overload
    def dst(self, dt: _datetime) -> timedelta: ...
    @overload
    def tzname(self, dt: None) -> None: ...
    @overload
    def tzname(self, dt: _datetime) -> str: ...
    def fromutc(self, dt: _D) -> _D: ...
    def __getinitargs__(self) -> tuple[str]: ...

class FixedTimezone(Timezone):
    def __init__(self, offset: int, name: str | None = ...) -> None: ...
    @property
    def offset(self) -> int: ...
    def utcoffset(self, dt: _datetime | None) -> timedelta: ...
    def dst(self, dt: _datetime | None) -> timedelta: ...
    def fromutc(self, dt: _D) -> _D: ...
    def tzname(self, dt: _datetime | None) -> str | None: ...
    def __getinitargs__(self) -> tuple[int, str | None]: ...

class TimezoneFile(Timezone):
    def __init__(self, path: StrOrBytesPath | int) -> None: ...

UTC: Final[FixedTimezone]
